// deno-lint-ignore-file no-explicit-any
/**
 * This module contains type definitions and interfaces used by the
 * `@decorators/lru` library.
 *
 * @module types
 */
const kCacheKey: unique symbol = Symbol("cacheKey");
type kCacheKey = typeof kCacheKey;

interface IsCacheKey {
  readonly [kCacheKey]: never;
}

/**
 * Represents a cache key used by the internal {@linkcode LRU} cache
 * implementation. This is a serialized representation of the arguments passed
 * to the decorated method, and is used to uniquely identify the cached value.
 * The {@linkcode Keygen} function generates values of this type.
 *
 * @remarks
 * This is a nominal (branded) string type, which is distinct from a regular
 * string. This allows us to use the `CacheKey` type in a type-safe manner,
 * and ensure that we're dealing with a key that's been generated by the
 * {@linkcode Keygen} function, rather than an arbitrary string.
 *
 * @category Types
 */
export type CacheKey = string & IsCacheKey;

/**
 * A cached entry record that holds the actual value and, optionally,
 * an expiration timestamp in milliseconds as well as a timer handle for
 * active eviction.
 *
 * @template T The type of the cached value.
 * @category Types
 * @internal
 */
export interface CacheEntry<T> {
  /** The key used to store the entry in the cache. */
  key: CacheKey;

  /** The cached value. */
  value: T;

  /** The entry's age, in milliseconds since it was created. */
  readonly age: number;

  /**
   * The time this entry was created, in milliseconds since the epoch.
   *
   * This does not necessarily  reflect the **_first_** time the entry was
   * created, but rather the most recent time it was refreshed/recreated.
   */
  createdAt: number;

  /**
   * Optional expiration timestamp (in milliseconds since the epoch).
   * If present, the entry expires when Date.now() exceeds this value.
   */
  expiresAt?: number | undefined;

  /** Optional timer handle used for active eviction. */
  timer?: ReturnType<typeof setTimeout> | undefined;
}

/**
 * An extended cache entry record that holds the original value (before
 * any pre-processing steps), the stored value (after pre-processing),
 * and the final value (after any transformations), along with a reference
 * to the LRU cache instance itself.
 *
 * @template T The type of the cached value.
 * @category Types
 */
export interface ExtendedCacheEntry<T> extends CacheEntry<T> {
  /** The cache instance itself. */
  cache: MapLike<CacheKey, CacheEntry<T>>;
  /** The key used to store the entry in the cache. */
  key: CacheKey;
  /** The value stored in the cache, after calling the `prepare` function to
   * apply any transformations. */
  value: T;
  /** The original value that was generated by the decorated method. */
  originalValue: T;
  /** The final value that is actually being returned to the caller, after
   * applying any transformations from the `transform` function. */
  finalizedValue: T;
  /** The TTL (time-to-live) of the entry, in milliseconds. If no TTL is
   * set, this will be `0`. */
  ttl: number;
}

/**
 * Deeply-nested cache storage structure for the {@linkcode lru} decorator.
 *
 * @category Types
 */
export type CacheContainer<
  T extends object = object,
  K extends PropertyKey = PropertyKey,
  V = any,
> = MapLike<object, MapLike<T, MapLike<K, MapLike<string, V>>>>;

/**
 * The minimal representation of a {@linkcode Date} constructor required for
 * time-based operations (e.g. TTL evictions) in the {@linkcode lru} decorator.
 *
 * This type only requires the presence of a `now()` method, which must return
 * a number representing the current time in milliseconds. The global `Date`
 * object is the default implementation for this interface.
 *
 * This is primarily used for testing and dependency injection purposes, and is
 * the type expected by the `Date` option in the {@linkcode Overrides} object.
 *
 * @category Types
 * @tags Overrides
 */
export interface TimeProvider {
  /** Returns the current time in milliseconds since the epoch. */
  now(): number;
}

/**
 * Represents a constructor of {@linkcode LRU} instances. This is primarily
 * used for testing and dependency injection purposes. It is the type expected
 * by the `LRU` option in the {@linkcode Overrides} object.
 *
 * @category Types
 * @tags Overrides
 */
export interface LruLikeConstructor {
  /** Creates a new instance of the LRU cache. */
  new <K, V>(maxSize: number): MapLike<K, V>;
}

/**
 * Represents the minimal required API for the internal keyed collections used
 * by the {@linkcode lru} decorator to store cached values. This interface is
 * intentionally minimal and generic by design, for maximum flexibility.
 *
 * This type is implemented by the {@linkcode LRU} class as well as the global
 * `Map` and `WeakMap` APIs. Together these form a multi-layer, memory-safe
 * data structure that is used as the default cache storage mechanism.
 *
 * @remarks
 * If you plan on using a custom cache implementation with the {@linkcode lru}
 * decorator, or want to override the internal `Map` or `WeakMap` constructors
 * for advanced testing/debugging purposes, any classes you provide for those
 * overrides must implement this interface to be considered compatible.
 *
 * @category Types
 * @tags Overrides
 */
export interface MapLike<K, V> {
  /** Gets the number of entries in the cache. */
  get(key: K): V | undefined;
  /** Sets a value in the cache. */
  set(key: K, value: V): this;
  /** Checks if a key exists in the cache. */
  has(key: K): boolean;
  /** Deletes a key from the cache. */
  delete(key: K): boolean;
}

/**
 * Represents a constructor of {@linkcode MapLike} instances. This is primarily
 * used for testing and dependency injection purposes. It is the type expected
 * by the `Map` and `WeakMap` options in the {@linkcode Overrides} object.
 *
 * @category Types
 * @tags Overrides
 */
export interface MapLikeConstructor {
  /** Creates a new instance of the map. */
  new <K, V>(): MapLike<K, V>;
  /** Creates a new instance of the map with the given entries. */
  new <K, V>(entries?: [K, V][] | undefined): MapLike<K, V>;
}
